import { describe, expect, test } from '@jest/globals';
import { Graph } from '../dacc/graph/graph';
describe('Graph', () => {
    test('should add and retrieve nodes', () => {
        const graph = new Graph();
        const node = { id: '1', parents: [] };
        graph.add(node);
        expect(graph.nodes.get('1')).toEqual(node);
    });
    test('should update nodes', () => {
        const graph = new Graph();
        const node = { id: '1', parents: [], value: 'test' };
        graph.add(node);
        const updatedNode = { id: '1', parents: [], value: "updated" };
        graph.update('1', updatedNode);
        expect(graph.nodes.get('1')).toEqual(updatedNode);
    });
    test('should throw error when updating non-existent node', () => {
        const graph = new Graph();
        const node = { id: '1', parents: [] };
        expect(() => graph.update('1', node)).toThrow('Node not found: 1');
    });
    test('should perform topological sort on acyclic graph', () => {
        const graph = new Graph();
        graph.add({ id: '1', parents: [] });
        graph.add({ id: '3', parents: ['2'] });
        graph.add({ id: '4', parents: ['3', '1'] });
        graph.add({ id: '2', parents: ['1'] });
        graph.add({ id: '5', parents: ['4', '3'] });
        const sorted = graph.sort();
        expect(sorted.map(n => n.id)).toEqual(['1', '2', '3', '4', '5']);
    });
    test('should detect cycles in graph', () => {
        const graph = new Graph();
        graph.add({ id: '1', parents: ['3'] });
        graph.add({ id: '2', parents: ['1'] });
        graph.add({ id: '3', parents: ['2'] });
        expect(() => graph.sort()).toThrow(/Cycle detected:/);
    });
    test('should handle empty graph', () => {
        const graph = new Graph();
        expect(graph.sort()).toEqual([]);
    });
    test('should handle graph with single node', () => {
        const graph = new Graph();
        const node = { id: '1', parents: [], value: "1" };
        graph.add(node);
        expect(graph.sort()).toEqual([node]);
    });
    test('should handle graph with multiple independent nodes', () => {
        const graph = new Graph();
        const node1 = { id: '1', parents: [] };
        const node2 = { id: '2', parents: [] };
        graph.add(node1);
        graph.add(node2);
        const sorted = graph.sort();
        expect(sorted).toHaveLength(2);
        expect(sorted).toContain(node1);
        expect(sorted).toContain(node2);
    });
});
//# sourceMappingURL=data:application/json;base64,